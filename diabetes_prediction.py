# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hzWsRBNnSa-2FfjmgEpjk6I0ivvmJvWZ
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# Data collection and analysis
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.tail()

diabetes_dataset.shape

diabetes_dataset.info()

diabetes_dataset.describe()

#0--> non diabetic
#1==> diabetic
diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

# seperating data and labels
x = diabetes_dataset.drop(columns='Outcome', axis=1)
y = diabetes_dataset['Outcome']

print(x)

print(y)

# data standardization
scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

# splitting training and test data
X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

#training the model
classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

#model evaluation
#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy score of the training data : ",training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy score of the testing data : ",testing_data_accuracy)

input_data = (8,183,64,0,0,23.3,0.672,32)
# changing the input data to numpy array
input_data_as_numpy_array = np.array(input_data)
#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print("Person is not diabetic")
else:
  print("Person is diabetic")

